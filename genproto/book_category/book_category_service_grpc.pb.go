// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: book_category/book_category_service.proto

package book_category

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookCategoryServiceClient is the client API for BookCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookCategoryServiceClient interface {
	Create(ctx context.Context, in *CategoryCreate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *CategoryCreate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error)
}

type bookCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookCategoryServiceClient(cc grpc.ClientConnInterface) BookCategoryServiceClient {
	return &bookCategoryServiceClient{cc}
}

func (c *bookCategoryServiceClient) Create(ctx context.Context, in *CategoryCreate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BookCategoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) Update(ctx context.Context, in *CategoryCreate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.BookCategoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) GetCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error) {
	out := new(GetAllCategoriesResponse)
	err := c.cc.Invoke(ctx, "/genproto.BookCategoryService/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCategoryServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*GetCategoryByIdResponse, error) {
	out := new(GetCategoryByIdResponse)
	err := c.cc.Invoke(ctx, "/genproto.BookCategoryService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookCategoryServiceServer is the server API for BookCategoryService service.
// All implementations must embed UnimplementedBookCategoryServiceServer
// for forward compatibility
type BookCategoryServiceServer interface {
	Create(context.Context, *CategoryCreate) (*emptypb.Empty, error)
	Update(context.Context, *CategoryCreate) (*emptypb.Empty, error)
	GetCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error)
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error)
	mustEmbedUnimplementedBookCategoryServiceServer()
}

// UnimplementedBookCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookCategoryServiceServer struct {
}

func (UnimplementedBookCategoryServiceServer) Create(context.Context, *CategoryCreate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookCategoryServiceServer) Update(context.Context, *CategoryCreate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBookCategoryServiceServer) GetCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedBookCategoryServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*GetCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedBookCategoryServiceServer) mustEmbedUnimplementedBookCategoryServiceServer() {}

// UnsafeBookCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookCategoryServiceServer will
// result in compilation errors.
type UnsafeBookCategoryServiceServer interface {
	mustEmbedUnimplementedBookCategoryServiceServer()
}

func RegisterBookCategoryServiceServer(s grpc.ServiceRegistrar, srv BookCategoryServiceServer) {
	s.RegisterService(&BookCategoryService_ServiceDesc, srv)
}

func _BookCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BookCategoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).Create(ctx, req.(*CategoryCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BookCategoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).Update(ctx, req.(*CategoryCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BookCategoryService/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).GetCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCategoryService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCategoryServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.BookCategoryService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCategoryServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookCategoryService_ServiceDesc is the grpc.ServiceDesc for BookCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.BookCategoryService",
	HandlerType: (*BookCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BookCategoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookCategoryService_Update_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _BookCategoryService_GetCategories_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _BookCategoryService_GetCategoryById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book_category/book_category_service.proto",
}
